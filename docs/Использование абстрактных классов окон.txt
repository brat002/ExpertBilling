Для улучшения интерфейса был создан модуль mdi/ebsWindow.py в котором имеются следующие классы:
	
	1. ebsTableWindow
	
		Абстрактный класс окна с таблицей. В него вынесены функции создания и инициализации окна и таблицы. А также логика сохранения заголовка таблицы и методы, облегчающие работу с Действиями(actions).
		
		Тело класса:
		
class ebsTableWindow(QtGui.QMainWindow):
    sequenceNumber = 1
    
    #метод инициализации, по некоторым входным агрументам инициализирует окно и таблицу
    def __init__(self, connection, initargs):
        self.setname = initargs["setname"]
        bhdr = HeaderUtil.getBinaryHeader(self.setname)
        self.strftimeFormat = "%d" + dateDelim + "%m" + dateDelim + "%Y %H:%M:%S"
        #метод, который вызывается перед инициализацией окна
        self.ebsPreInit(initargs)
        
        #инициализация окна и создание таблицы
        super(ebsTableWindow, self).__init__()
        self.setObjectName(initargs["objname"])
        self.connection = connection
        self.resize(QtCore.QSize(QtCore.QRect(*initargs["winsize"]).size()).expandedTo(self.minimumSizeHint()))
        self.tableWidget = QtGui.QTableWidget()
        self.tableWidget.setObjectName("tableWidget")
        if initargs.has_key("tablesize"):
            self.tableWidget.setGeometry(QtCore.QRect(*initargs["tablesize"]))
        self.setCentralWidget(self.tableWidget)
        self.tableWidget = tableFormat(self.tableWidget)
        
        #метод, который вызывается после создания таблицы
        #желательно, чтобы в нём находилась логика создания других объектов
        self.ebsInterInit(initargs)
        
        #метод определения текстовых элементов
        self.retranslateUI(initargs)
        
        #первичное заполнение таблицы и логика сохранения заголовка
        HeaderUtil.nullifySaved(self.setname)
        
        
        self.refresh()
        
        self.firsttime = True
        if not bhdr.isEmpty():
                HeaderUtil.setBinaryHeader(self.setname, bhdr)
                HeaderUtil.getHeader(self.setname, self.tableWidget)
        else: self.firsttime = False
        tableHeader = self.tableWidget.horizontalHeader()
        self.connect(tableHeader, QtCore.SIGNAL("sectionResized(int,int,int)"), self.saveHeader)
        
        #метод, который  вызывается после заполнения таблицы\
        # желательно, чтобы в нём было создание действий и определение сигналов
        self.ebsPostInit(initargs)
        
    #должен быть переопределён И вызван родительский
    def retranslateUI(self, initargs):
        self.setWindowTitle(QtGui.QApplication.translate("MainWindow", initargs["wintitle"], None, QtGui.QApplication.UnicodeUTF8))
        self.tableWidget.clear()

        columns = initargs["tablecolumns"]
        makeHeaders(columns, self.tableWidget)
        
    
    def ebsRetranslateUi(self, initargs):
        pass
    
    #метод, который вызывается перед инициализацией окна
    def ebsPreInit(self, initargs):
        pass
    
    #метод, который вызывается после создания таблицы
    #желательно, чтобы в нём находилась логика создания других объектов
    def ebsInterInit(self, initargs):
        pass
    
    #метод, который  вызывается после заполнения таблицы\
    # желательно, чтобы в нём было создание действий и определение сигналов
    def ebsPostInit(self, initargs):
        pass
    
    #должен быть переопределён      
    def refresh(self):
        pass
        
    def getSelectedId(self):
        return int(self.tableWidget.item(self.tableWidget.currentRow(), 0).text())
        
    #метод для создания и определения действий. 
    №аргументами - лист с информацией о действии и словарь объектов к которым они должны быть прикреплены
    #list example: [(name, title, iconpath, function)]
    #dict example: {objname:[actname, {"separator"}]
    def actionCreator(self, aList, objDict):
        aDict = {}
        for atuple in aList:
            try:
                setattr(self, atuple[0], QtGui.QAction(self))
                newAct = getattr(self, atuple[0])
                newAct.setIcon(QtGui.QIcon(atuple[2]))
                self.connect(newAct, QtCore.SIGNAL("triggered()"), atuple[3])
                newAct.setText(QtGui.QApplication.translate("MainWindow", atuple[1], None, QtGui.QApplication.UnicodeUTF8)) 
                aDict[atuple[0]] = newAct
            except Exception, ex:
                print "ebsWindow.actionCreator create error: ", repr(ex)
                
        for wObj in objDict.iterkeys():
            for actname in objDict[wObj]:
                try:
                    if actname == "separator":
                        wObj.addSeparator()
                    else:
                        wObj.addAction(aDict[actname])
                except Exception, ex:
                    print "ebsWindow.actionCreator addaction error: ", repr(ex)
    
    def saveHeader(self, *args):
        if self.tableWidget.rowCount():
            HeaderUtil.saveHeader(self.setname, self.tableWidget)
    
    #аргумент - лист действий        
    def delNodeLocalAction(self, actList):
        if self.tableWidget.currentRow()==-1:
            for actObj in actList:
                actObj.setDisabled(True)
        else:
            for actObj in actList:
                actObj.setDisabled(False)
    
    
    
    Имплементация:
    	
   class NasEbs(ebsTableWindow):
    def __init__(self, connection):
        columns=[u"id", u"Имя", u"Тип", u"IP"]
        # setname - идентификатор в словаре QSettings 
        initargs = {"setname":"nas_frame_header", "objname":"NasEbsMDI", "winsize":(0,0,400,400), "wintitle":"Серверы доступа", "tablecolumns":columns}
        # ВЫЗОВ РОДИТЕЛЬСКОГО - ОБЯЗАТЕЛЕН
        super(NasEbs, self).__init__(connection, initargs)
     
    #создание других объектов!   
    def ebsInterInit(self, initargs):
        self.statusbar = QtGui.QStatusBar(self)
        self.setStatusBar(self.statusbar)

        self.toolBar = QtGui.QToolBar(self)
        self.toolBar.setMovable(False)
        self.toolBar.setFloatable(False)
        self.addToolBar(QtCore.Qt.TopToolBarArea,self.toolBar)
        self.toolBar.setIconSize(QtCore.QSize(18,18))        
        self.tableWidget.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)        
        self.toolBar.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)

        
    def ebsPostInit(self, initargs):
        self.connect(self.tableWidget, QtCore.SIGNAL("cellDoubleClicked(int, int)"), self.editframe)
        self.connect(self.tableWidget, QtCore.SIGNAL("cellClicked(int, int)"), self.delNodeLocalAction)
		
		#автомаматическое создание действий
		#имядействия - текстовое отображение - путь к иконке - метод
        actList=[("addAction", "Добавить", "images/add.png", self.addframe), ("editAction", "Настройки", "images/open.png", self.editframe), ("delAction", "Удалить", "images/del.png", self.delete), ("configureAction", "Конфигурировать", "images/configure.png", self.configure)]
        objDict = {self.tableWidget:["editAction", "addAction", "delAction", "configureAction"], self.toolBar:["addAction", "delAction", "configureAction"]}
        self.actionCreator(actList, objDict)
        self.setAttribute(QtCore.Qt.WA_DeleteOnClose)
        self.delNodeLocalAction()
        
    def retranslateUI(self, initargs):
    	#ВЫЗОВ РОДИТЕЛЬСКОГО ОБЯЗАТЕЛЕН
        super(NasEbs, self).retranslateUI(initargs)
        self.toolBar.setWindowTitle(QtGui.QApplication.translate("MainWindow", "toolBar", None, QtGui.QApplication.UnicodeUTF8))

    # частные методы окна
    def addframe(self):
        model=None
        addf = AddNasFrame(connection=self.connection, model=model)
        addf.exec_()
        self.refresh()

    def configure(self):
        id=self.getSelectedId()
        if id==0:
            return
        if self.connection.configureNAS(id):
            QtGui.QMessageBox.warning(self, u"Ok", unicode(u"Настройка сервера доступа прошла удачно."))
        else:
            QtGui.QMessageBox.warning(self, u"Ошибка", unicode(u"Ошибка во время конфигурирования."))

    def delete(self):
        id=self.getSelectedId()
        if id>0:
            if self.connection.sql("""SELECT id FROM billservice_account WHERE (nas_id=%d)""" % id):
                QtGui.QMessageBox.warning(self, u"Предупреждение!", u"Пожалуйста, отцепите сначала всех пользователей от сервера!")
                return
            elif (QtGui.QMessageBox.question(self, u"Удалить сервер доступа?" , u'''Все связанные с сервером доступа аккаунты \n и вся статистика будут удалены. \nВы уверены, что хотите это сделать?''', QtGui.QMessageBox.Yes|QtGui.QMessageBox.No, QtGui.QMessageBox.No)==QtGui.QMessageBox.Yes):
                try:
                    #self.connection.sql("UPDATE nas_nas SET deleted=TRUE WHERE id=%d" % id, False)
                    self.connection.iddelete("nas_nas", id)
                    self.connection.commit()
                    self.refresh()
                except Exception, e:
                    print e
                    self.connection.rollback()
                    QtGui.QMessageBox.warning(self, u"Предупреждение!", u"Удаление не было произведено!")
        
    def editframe(self):
        try:
            model=self.connection.get("SELECT * FROM nas_nas WHERE id=%d" % self.getSelectedId())
        except:
            model=None

        addf = AddNasFrame(connection=self.connection, model=model)
        addf.exec_()
        self.refresh()

    def addrow(self, value, x, y):
        headerItem = QtGui.QTableWidgetItem()
        headerItem.setText(unicode(value))
        if y==1:
            headerItem.setIcon(QtGui.QIcon("images/nas.png"))
        self.tableWidget.setItem(x,y,headerItem)


    def refresh(self):
        #self.tableWidget.setSortingEnabled(False)
        nasses = self.connection.foselect("nas_nas")
        self.tableWidget.setRowCount(len(nasses))
        i=0
        for nas in nasses:
            self.addrow(nas.id, i,0)
            self.addrow(nas.name, i,1)
            self.addrow(nas.type, i,2)
            self.addrow(nas.ipaddress, i,3)
            #self.tableWidget.setRowHeight(i, 14)
            i+=1
        self.tableWidget.setColumnHidden(0, True)

        HeaderUtil.getHeader("nas_frame_header", self.tableWidget)
        #self.tableWidget.resizeColumnsToContents()
        #self.tableWidget.setSortingEnabled(True)
    

    def delNodeLocalAction(self):
        super(NasEbs, self).delNodeLocalAction([self.delAction, self.configureAction])

